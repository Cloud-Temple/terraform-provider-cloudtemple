# Visitez https://goreleaser.com pour la documentation sur la personnalisation
# de ce comportement.
version: 2

before:
  hooks:
    # Ceci est juste un exemple et n'est pas une exigence pour la construction/publication du fournisseur
    - go mod tidy

builds:
  - env:
      # goreleaser ne fonctionne pas avec CGO, cela pourrait également compliquer
      # l'utilisation par les utilisateurs dans les systèmes CI/CD comme Terraform Cloud où
      # ils ne peuvent pas installer de bibliothèques.
      - CGO_ENABLED=0
    mod_timestamp: '{{ .CommitTimestamp }}'
    flags:
      - -trimpath
    ldflags:
      - '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}}'
    goos:
      - freebsd
      - windows
      - linux
      - darwin
    goarch:
      - amd64
      - '386'
      - arm
      - arm64
    ignore:
      - goos: darwin
        goarch: '386'
    binary: '{{ .ProjectName }}_v{{ .Version }}'

archives:
  - format: zip
    name_template: '{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}'

checksum:
  extra_files:
    - glob: 'terraform-registry-manifest.json'
      name_template: '{{ .ProjectName }}_{{ .Version }}_manifest.json'
  name_template: '{{ .ProjectName }}_{{ .Version }}_SHA256SUMS'
  algorithm: sha256

signs:
  - cmd: gpg
    artifacts: checksum
    args:
      # Si vous utilisez ceci dans une action GitHub ou un autre pipeline automatisé,
      # vous devez passer le drapeau batch pour indiquer qu'il n'est pas interactif.
      - "--batch"
      - "--local-user"
      - "{{ .Env.GPG_FINGERPRINT }}" # Définissez cette variable d'environnement pour votre clé de signature
      - "--output"
      - "${signature}"
      - "--detach-sign"
      - "${artifact}"

release:
  extra_files:
    - glob: 'terraform-registry-manifest.json'
      name_template: '{{ .ProjectName }}_{{ .Version }}_manifest.json'
  # Si vous voulez examiner manuellement la version avant sa mise en ligne, décommentez cette ligne :
  # draft: true

changelog:
  disable: true
